/* --------------------
   Case Study Questions
   --------------------*/

-- 1. What is the total amount each customer spent at the restaurant?

SELECT
	customer_id,
    SUM (menu.price) as total_sales
FROM dannys_diner.sales
LEFT JOIN dannys_diner.menu
ON sales.product_id = menu.product_id
GROUP BY customer_id;

-- 2. How many days has each customer visited the restaurant?

SELECT 
	customer_id,
    COUNT( DISTINCT order_date)
FROM dannys_diner.sales
GROUP BY customer_id;

-- 3. What was the first item from the menu purchased by each customer?

WITH order_rank_cte as ( 
SELECT
	customer_id,
    DENSE_RANK() OVER (PARTITION BY customer_id ORDER BY order_date) as order_rank,
    product_name
FROM dannys_diner.sales
LEFT JOIN dannys_diner.menu
ON sales.product_id = menu.product_id
)

SELECT 
	customer_id,
    product_name
FROM order_rank_cte
WHERE order_rank = 1 ;


-- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?

SELECT
    menu.product_name,
    COUNT(sales.product_id) as sales
FROM dannys_diner.sales
LEFT JOIN dannys_diner.menu
ON sales.product_id = menu.product_id
GROUP BY 
    menu.product_name
ORDER BY sales DESC
LIMIT 1;

-- 5. Which item was the most popular for each customer?
WITH q_cte AS (
SELECT
	customer_id,
    menu.product_name,
    COUNT(sales.product_id) as quantity,
    RANK() OVER (PARTITION BY customer_id ORDER BY COUNT(sales.product_id) DESC ) 
FROM dannys_diner.sales
LEFT JOIN dannys_diner.menu
ON sales.product_id = menu.product_id
GROUP BY 
	customer_id,
    menu.product_name
)

SELECT 
	customer_id,
    product_name,
    quantity
FROM q_cte
WHERE rank = 1;

-- 6. Which item was purchased first by the customer after they became a member?
WITH member_rank_cte AS ( 
SELECT 
	sales.customer_id,
    order_date, 
    product_name,
    DENSE_RANK() OVER (PARTITION BY sales.customer_id ORDER BY order_date) AS  _rank
FROM dannys_diner.members
INNER JOIN dannys_diner.sales
ON members.customer_id = sales.customer_id
INNER JOIN dannys_diner.menu
ON menu.product_id = sales.product_id
WHERE order_date >= join_date
)

SELECT
	customer_id,
    order_date,
    product_name
FROM member_rank_cte
WHERE _rank = 1; 


-- 7. Which item was purchased just before the customer became a member?


WITH first_purchase_cte AS (

SELECT 
	sales.customer_id,
    order_date, 
    product_name,
    DENSE_RANK() OVER (PARTITION BY sales.customer_id ORDER BY order_date DESC) AS  _rank
FROM dannys_diner.members
INNER JOIN dannys_diner.sales
ON members.customer_id = sales.customer_id
INNER JOIN dannys_diner.menu
ON menu.product_id = sales.product_id
WHERE order_date < join_date
)


SELECT
	customer_id,
    order_date,
    product_name
FROM first_purchase_cte
WHERE _rank = 1; 


-- 8. What is the total items and amount spent for each member before they became a member?

SELECT 
	sales.customer_id,
    COUNT( DISTINCT sales.product_id) AS unique_items ,
    SUM(menu.price) AS total_purchases_before_membership
FROM dannys_diner.members
INNER JOIN dannys_diner.sales
ON members.customer_id = sales.customer_id
INNER JOIN dannys_diner.menu
ON menu.product_id = sales.product_id
WHERE order_date < join_date
GROUP BY sales.customer_id;


-- 9.  If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?
SELECT
	sales.customer_id,
   SUM (
     	CASE WHEN product_name = 'sushi' THEN 10 * 2 * menu.price 
    	ELSE 10 * menu.price 
      	END ) AS points 
FROM dannys_diner.sales
LEFT JOIN dannys_diner.menu USING (product_id) 
GROUP BY customer_id
ORDER BY points DESC;

    
-- 10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?

SELECT dannys_diner.sales.customer_id , 
SUM( 
CASE	 
  	 
  	WHEN 
	order_date >= join_date AND order_date <= join_date + 6  THEN price * 20  
    WHEN 
  	product_name = 'sushi' THEN price * 20  
  	WHEN 
  	order_date < '2021-01-31' then price * 10 
  	Else  
  	NULL 
    END ) as points 
FROM dannys_diner.sales 
LEFT JOIN dannys_diner.menu USING (product_id) 
LEFT JOIN dannys_diner.members USING (customer_id) 
WHERE customer_id = 'A' OR customer_id = 'B' 
GROUP BY customer_id;
